<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>后台管理系统项目总结</title>
    <link href="/2022/04/23/%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E6%80%BB%E7%BB%93/"/>
    <url>/2022/04/23/%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>通用后台管理系统，分权限登录，权限不同用户展示的界面不同。使用的技术有vue、vuex、vue-router、Element-UI、Echarts，数据是使用Mockjs生成。</p><p><strong>主要页面：</strong></p><p>首页：用来展示用户基本信息及图表</p><p>商品页：查看商品详细数据（和图表一一对应），可以对商品数据进行增删改查</p><p>用户页：查看用户信息，可以进行增删改查</p><p>登录页：用户登录，根据登录账号进行权限跳转</p><h2 id="主要功能实现"><a href="#主要功能实现" class="headerlink" title="主要功能实现"></a>主要功能实现</h2><h3 id="页面布局"><a href="#页面布局" class="headerlink" title="页面布局"></a>页面布局</h3><p>页面通过Element-Ui实现，整体布局使用的Container 布局容器，使用的主要组件有</p><figure class="highlight vim"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><pre><code class="hljs vim"><span class="hljs-symbol">&lt;el-button&gt;</span>:按钮<br><span class="hljs-symbol">&lt;el-dropdown&gt;</span>：下拉菜单，触发方式默认是hover，可设置为click<br><span class="hljs-symbol">&lt;el-menu&gt;</span>:导航栏，submenu组件可以生成二级菜单<br><span class="hljs-symbol">&lt;el-tag&gt;</span>：标签，通过设置<span class="hljs-built_in">type</span>属性来设置颜色<br><span class="hljs-symbol">&lt;el-card&gt;</span>:卡片<br><span class="hljs-symbol">&lt;el-table&gt;</span>:表格<br><span class="hljs-symbol">&lt;el-form&gt;</span>表单，可以通过rules设置规则<br><span class="hljs-symbol">&lt;el-dialog&gt;</span>弹出一个对话框,常用属性visible、<span class="hljs-built_in">type</span><br><span class="hljs-symbol">&lt;el-pagination&gt;</span>分页，常用属性layout、page-size、total（总条目数）<br>message：消息提示<br><span class="hljs-keyword">confirm</span>：消息提示框，美化alert提示框<br></code></pre></td></tr></table></figure><h3 id="axios封装"><a href="#axios封装" class="headerlink" title="axios封装"></a>axios封装</h3><ol><li><p>配置axios并添加拦截器</p><ul><li><p>使用create方法创建axios实例，config参数有baseURL、timeout、header等</p></li><li><p>添加请求拦截器和响应拦截器</p></li></ul></li><li><p>封装请求</p><p>封装<code>getMenu</code>、<code>getData</code>、<code>getUserData</code>、<code>getMallData</code>等请求</p></li><li><p>使用</p><p>在组件直接使用getMenu().then()</p><p>或者在原型上拓展，这样就可以全局使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Vue</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">$http</span> = axios;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//在组件使用</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">$http</span>.<span class="hljs-title function_">post</span>()<br></code></pre></td></tr></table></figure></li></ol><h3 id="数据模拟"><a href="#数据模拟" class="headerlink" title="数据模拟"></a>数据模拟</h3><p>使用Mockjs进行数据模拟</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"> <span class="hljs-title class_">Mock</span>.<span class="hljs-title function_">mock</span>(&#123;<br>    <span class="hljs-string">&#x27;name|1&#x27;</span>: [<span class="hljs-string">&#x27;苹果&#x27;</span>, <span class="hljs-string">&#x27;三星&#x27;</span>, <span class="hljs-string">&#x27;oppo&#x27;</span>, <span class="hljs-string">&#x27;vivo&#x27;</span>, <span class="hljs-string">&#x27;魅族&#x27;</span>, <span class="hljs-string">&#x27;小米&#x27;</span>]<span class="hljs-comment">//从列表项随机选一个</span><br>    <span class="hljs-attr">id</span>: <span class="hljs-title class_">Mock</span>.<span class="hljs-property">Random</span>.<span class="hljs-title function_">guid</span>(),<span class="hljs-comment">//随机生成guid</span><br>    <span class="hljs-attr">count</span>: <span class="hljs-title class_">Mock</span>.<span class="hljs-property">Random</span>.<span class="hljs-title function_">float</span>(<span class="hljs-number">100</span>, <span class="hljs-number">8000</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>),<span class="hljs-comment">//产生随机数100到8000之间 保留小数 最小0位 最大0位</span><br>    <span class="hljs-attr">name</span>: <span class="hljs-title class_">Mock</span>.<span class="hljs-property">Random</span>.<span class="hljs-title function_">cname</span>(),<span class="hljs-comment">//随机中文名</span><br>    <span class="hljs-attr">addr</span>: <span class="hljs-title class_">Mock</span>.<span class="hljs-title function_">mock</span>(<span class="hljs-string">&#x27;@county(true)&#x27;</span>),<span class="hljs-comment">//随机地址，到区</span><br>    <span class="hljs-string">&#x27;age|18-60&#x27;</span>: <span class="hljs-number">1</span>,<span class="hljs-comment">//随机一个数</span><br>    <span class="hljs-attr">birth</span>: <span class="hljs-title class_">Mock</span>.<span class="hljs-property">Random</span>.<span class="hljs-title function_">date</span>(),<span class="hljs-comment">//随机日期</span><br>    <span class="hljs-attr">sex</span>: <span class="hljs-title class_">Mock</span>.<span class="hljs-property">Random</span>.<span class="hljs-title function_">integer</span>(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>)<span class="hljs-comment">//返回一个随机的整数</span><br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="图表展示"><a href="#图表展示" class="headerlink" title="图表展示"></a>图表展示</h3><p>使用Echarts展示柱状图、饼图和条形图</p><p>封装了一个echarts组件，按传入的数据展示是哪种类型，该组件props两个数据：isAxisChart、chartData（xData、series）</p><p>Echarts常用属性：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-title">legend</span>:图例，可以设置字体样式<br><span class="hljs-title">tooltip</span>：鼠标放上面显示的部分，trigger来设置触发类型，可设置为item（饼图常用）、axis（折线图、柱状图）<br><span class="hljs-title">xAxis</span>：x轴，可设置<span class="hljs-class"><span class="hljs-keyword">type</span>属性（坐标轴类型）、axisLabel（坐标轴刻度）</span><br><span class="hljs-title">yAxis</span>：y轴<br><span class="hljs-title">series</span>：系列，数据集映射到系列，常用属性<span class="hljs-class"><span class="hljs-keyword">type</span>（设置图表类型）、<span class="hljs-keyword">data</span>(该项对应的数据)、name（图例数据名字）</span><br></code></pre></td></tr></table></figure><h3 id="tag栏和面包屑的实现"><a href="#tag栏和面包屑的实现" class="headerlink" title="tag栏和面包屑的实现"></a>tag栏和面包屑的实现</h3><p><strong>面包屑</strong>使用<code>&lt;el-breadcrumb&gt;</code>实现，通过设置<code>separator-class=&quot;el-icon-arrow-right&quot;</code>可以将分隔符变成<code>&gt;</code></p><p>具体实现：</p><ol><li><p>在vuex的state中添加tabList属性，用于存储被点击过的组件的路由信息。</p></li><li><p>当点击左导航栏组件里的item时，会<code>commit</code> selectMenu方法，该方法会把当前页信息存入tabList</p></li><li><p>通过v-for遍历tag来获取各个<code>&lt;el-breadcrumb-item&gt;</code>所需要的信息，tag是通过<code>...mapState</code> 获取到vuex中state的tabList数据</p></li></ol><p><img src="/image-20220422193136294.png"></p><p><strong>tags：</strong></p><ol><li><p>监听click事件，点击进行路由调整</p></li><li><p>监听close事件，关闭路由</p><p>通过mapMutation调用deleteMenu进行删除</p></li></ol><h3 id="登录-x2F-退出"><a href="#登录-x2F-退出" class="headerlink" title="登录&#x2F;退出"></a>登录&#x2F;退出</h3><ol><li>分权限登录</li></ol><p>​通过mockjs进行权限判断，admin和user登录显示的menu不同</p><ol start="2"><li><p>判断登录状态跳转界面</p><p>利用token验证用户是否处于登录状态</p><p>通过导航守卫进行跳转，如果为登录状态，界面直接跳转到home页，不再跳转login页；如果未登录状态，则直接跳转到login页</p></li></ol><h3 id="数据增删改查"><a href="#数据增删改查" class="headerlink" title="数据增删改查"></a>数据增删改查</h3><p>通过Mockjs来实现增伤改查</p><ul><li><p>在CommonTable组件发出emit事件：del、edit、chanPage</p></li><li><p>在父组件进行接收并响应事件</p><p>具体的删除、添加等操作由Mockjs处理并返回</p></li></ul><h2 id="封装的组件"><a href="#封装的组件" class="headerlink" title="封装的组件"></a>封装的组件</h2><p>CommonTable：展示全部数据时使用</p><p>Echarts：展示图表时使用</p><p>Form：新增数据的时候使用</p><p>Tags：导航栏</p>]]></content>
    
    
    <categories>
      
      <category>Summarize</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>商城项目总结</title>
    <link href="/2022/04/23/%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/"/>
    <url>/2022/04/23/%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h2 id="版本信息"><a href="#版本信息" class="headerlink" title="版本信息"></a>版本信息</h2><ul><li>vue（3.2.31）+vue-router（4.0.12）+CLI（5.0.1）+vuex</li><li>npm（6.14.10）</li></ul><h3 id="如何查看版本？"><a href="#如何查看版本？" class="headerlink" title="如何查看版本？"></a>如何查看版本？</h3>  <figure class="highlight coffeescript"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> list vue  查询vue版本<br>vue -V  查询CLI版本，注意：V要大写<br><span class="hljs-built_in">npm</span> -v  查询<span class="hljs-built_in">npm</span>版本<br></code></pre></td></tr></table></figure><h2 id="主要页面实现"><a href="#主要页面实现" class="headerlink" title="主要页面实现"></a>主要页面实现</h2><h3 id="首页"><a href="#首页" class="headerlink" title="首页"></a>首页</h3><p>重点功能：</p><ul><li><a href="#navbar">navbar</a></li><li><a href="#%E6%8E%A8%E8%8D%90%E6%A0%8F">推荐栏</a></li><li><a href="#%E6%A0%8F%E7%9B%AE%E5%AF%B9%E5%BA%94%E6%98%BE%E7%A4%BA">栏目对应显示商品</a></li><li><a href="#%E5%90%B8%E9%A1%B6%E6%95%88%E6%9E%9C">吸顶效果</a></li><li><a href="#%E5%9B%9E%E5%88%B0%E9%A1%B6%E9%83%A8%E6%8C%89%E9%92%AE">回到顶部按钮</a></li><li><a href="#%E5%9B%BE%E7%89%87%E7%9B%91%E5%90%AC">图片监听</a></li><li><a href="#%E4%B8%8A%E6%8B%89%E5%8A%A0%E8%BD%BD%E6%9B%B4%E5%A4%9A">上拉加载更多</a></li><li><a href="#%E4%BF%9D%E7%95%99%E4%B8%8A%E6%AC%A1%E6%BB%91%E5%8A%A8%E4%BD%8D%E7%BD%AE">保留上次滑动位置</a></li></ul><h4 id="navbar"><a href="#navbar" class="headerlink" title="navbar"></a>navbar</h4><p>封装成组件共用，使用具名插槽</p><p>vue3具名插槽使用方法有调整：需要将插槽内容包裹在<code>&lt;template&gt;&lt;/template&gt;</code>中，添加v-slot属性，语法糖是#</p><h4 id="栏目对应显示"><a href="#栏目对应显示" class="headerlink" title="栏目对应显示"></a>栏目对应显示</h4><ul><li>显示商品<ul><li>配置goods对应的request方法，因为pop、sell、new有专门的接口（123.207.32.32：8000&#x2F;home&#x2F;data?type&#x3D;new&amp;page&#x3D;1），所以设置的时候要用params传入type和page</li><li>新增goods对象，它包含三个对象，分别是pop{}、sell{}、new{}，每个对象有page和list两个属性。</li><li>将返回的res数据push到对应的goods里存起来，并将page+1</li><li>引入GoodList.vue组件来显示goods[currentType].list的数据</li></ul></li><li>显示对应页商品<ul><li>新增currentType，默认设置为’pop’</li><li>根据TabControl组件传过来的index，通过switch语句，对应设置不同的currentType</li></ul></li></ul><h4 id="推荐栏"><a href="#推荐栏" class="headerlink" title="推荐栏"></a>推荐栏</h4><p>创建multidate网络请求方法，然后把数据传给recommend页</p><h4 id="吸顶效果"><a href="#吸顶效果" class="headerlink" title="吸顶效果"></a>吸顶效果</h4><p>新增一个tabcontrol组件，当position的值大于旧tabbar组件的offsetTop值时，旧tabcontrol就已经滚出界面了，这时候就是刚刚新增的组件上场的时候，同时需要给新增的组件设置固定定位</p><p><strong>注意：</strong>为避免offsetTop获取错误，需要等页面图片加载完在获取，本页面一般是轮播图加载最慢，所以给轮播图监听一个load事件，load完之后再获取offsetTop值。同时一般只发出一个load事件即可，所以需要加一个if判断</p><h4 id="图片监听"><a href="#图片监听" class="headerlink" title="图片监听"></a>图片监听</h4><ul><li><p>添加全局图片加载监听，这样图片加载完refresh一次，可以避免出现bscroll滑不动的情况。因为home页和detail页都需要这个，所以将这个方法<strong>mixin</strong></p></li><li><p>GoodItem和Scroll两个组件并无关系，所以需要用事件总线发出事件，bus.emit，bus.on接收</p></li><li><p>需要在destory&#x2F;deactivated中取消图片全局监听，bus.off</p></li></ul><p>bus在vue3的用法：install  vue3-eventbus,然后import，就可以直接使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">bus.<span class="hljs-title function_">emit</span>(<span class="hljs-string">&#x27;ItemImageLoad&#x27;</span>)<br>bus.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;ItemImageLoad&#x27;</span>,<span class="hljs-variable language_">this</span>.<span class="hljs-property">itemImgListener</span>) ;  <br>bus.<span class="hljs-title function_">off</span>(<span class="hljs-string">&#x27;ItemImageLoad&#x27;</span>,<span class="hljs-variable language_">this</span>.<span class="hljs-property">itemImgListener</span>)<br></code></pre></td></tr></table></figure><h4 id="上拉加载更多"><a href="#上拉加载更多" class="headerlink" title="上拉加载更多"></a>上拉加载更多</h4><p>Bscroll传入pullingUp事件，设置loadMore方法，在此方法中调用getHomeGoods函数，主要是将page+1的数据也存进goods.list,然后GoodList显示goods.list的数据</p><p>注意：在.then方法里要主动调用finishpullingUp方法，否则无法进行下一次“上拉加载”操作</p><h4 id="保留上次滑动位置"><a href="#保留上次滑动位置" class="headerlink" title="保留上次滑动位置"></a>保留上次滑动位置</h4><ul><li><p>让home页keep-alive</p></li><li><p>在deactivated时记录位置，activated时scrollTo(0,this.saveY,300)</p><p>Bscroll可以通过<code>.y</code>直接获取到该scroll的纵坐标值</p></li></ul><h3 id="详情页"><a href="#详情页" class="headerlink" title="详情页"></a>详情页</h3><p>重点功能：</p><ul><li><a href="#%E7%82%B9%E5%87%BB%E8%B7%B3%E8%BD%AC%E5%88%B0%E8%AF%A6%E6%83%85%E9%A1%B5">点击跳转到详情页</a></li><li><a href="#%E8%BD%AE%E6%92%AD%E5%9B%BE%E7%BB%84%E4%BB%B6%3C%E6%9C%AA%E5%AE%8C%3E">轮播图组件</a></li><li><a href="#%E6%8E%A5%E5%8F%A3%E6%95%B0%E6%8D%AE%E8%AF%BB%E5%8F%96">接口数据读取</a></li><li><a href="#%E5%B0%81%E8%A3%85%E5%B9%B6%E4%BD%BF%E7%94%A8BScroll">封装及使用bscroll</a></li><li><a href="#%E8%AF%84%E4%BB%B7%E9%A1%B5%E6%97%A5%E6%9C%9F%E6%98%BE%E7%A4%BA">评价页日期显示</a></li><li><a href="%E6%8E%A8%E8%8D%90%E9%A1%B5%E5%B1%95%E7%A4%BA">推荐页展示</a></li><li><a href="#%E5%9B%9E%E5%88%B0%E9%A1%B6%E9%83%A8%E6%8C%89%E9%92%AE">回到顶部按钮</a></li><li><a href="#%E6%A0%87%E9%A2%98%E5%8F%8A%E5%86%85%E5%AE%B9%E5%AF%B9%E5%BA%94">标题及内容click对应</a></li><li><a href="#%E6%B7%BB%E5%8A%A0%E5%88%B0%E8%B4%AD%E7%89%A9%E8%BD%A6">添加到购物车</a></li><li><a href="#toast%E7%BB%84%E4%BB%B6%3C%E4%B8%8D%E7%86%9F%3E">toast组件</a></li><li><a href="#%E4%B8%BB%E8%A6%81css%E5%B8%83%E5%B1%80">主要css布局</a></li></ul><h4 id="点击跳转到详情页如何实现？"><a href="#点击跳转到详情页如何实现？" class="headerlink" title="点击跳转到详情页如何实现？"></a>点击跳转到详情页如何实现？</h4><blockquote><p>单页面应用:一个Web页面，页面各部分公用一个css，跳转时只刷新局部资源，公共的css部分仅需加载一次，不用刷新</p></blockquote><blockquote><p>vue-router，它可以用来跳转页面而且不用刷新页面。还可以用来传参.地址栏输入什么，跳转到哪。定义路由时，path是指访问路径，component指该路径对应的组件</p></blockquote><blockquote><p>路由懒加载：当路由被访问时才加载对应组件</p></blockquote><p>通过vue-router进行跳转，具体实现方式为</p><ol><li><p>在GoodsItem组件中监听click事件并添加push方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">this</span>.<span class="hljs-property">$router</span>.<span class="hljs-title function_">push</span>(路径) <span class="hljs-comment">//跳转到某个路径，可以回退，相当于 &lt;router-link :to=&quot;...&quot;&gt; </span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">$router</span>.<span class="hljs-title function_">replace</span>(路径) <span class="hljs-comment">//不可以回退，即没有返回按钮</span><br></code></pre></td></tr></table></figure></li><li><p>配置路由</p><p>在router的主js文件中配置路径</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js">...<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Detail</span> = (<span class="hljs-params"></span>) =&gt;<span class="hljs-title function_">import</span>(<span class="hljs-string">&#x27;../views/detail/Detail&#x27;</span>)<span class="hljs-comment">//路由懒加载</span><br>...<br>&#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/detail/:iid&quot;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-title class_">Detail</span><br>  &#125;<br></code></pre></td></tr></table></figure></li></ol><h4 id="接口数据读取传入"><a href="#接口数据读取传入" class="headerlink" title="接口数据读取传入"></a>接口数据读取传入</h4><blockquote><p>axios：Vue中发送网络请求的第三方框架</p><p>请求拦截：先执行要添加的数据，再传给ajax，添加数据的过程就是请求拦截</p><p>响应拦截：在请求结果返回后，先对响应码进行处理，在导出给页面，处理响应码的过程就是响应拦截</p></blockquote><ol><li><p>进行网络封装</p><ul><li>进行axios封装</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//request.js文件</span><br><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;axios&#x27;</span><br><br><span class="hljs-comment">//注意，可能有多个实例，所以不用export default</span><br><span class="hljs-comment">//config是指传入的配置，比如url、param等</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">request</span>(<span class="hljs-params">config</span>) &#123;<br>  <span class="hljs-comment">// 1.创建axios的实例</span><br>  <span class="hljs-keyword">const</span> instance = axios.<span class="hljs-title function_">create</span>(&#123;<br>    <span class="hljs-attr">baseURL</span>: <span class="hljs-string">&#x27;http://localhost:3000&#x27;</span>,<br>    <span class="hljs-attr">timeout</span>: <span class="hljs-number">5000</span><br>  &#125;)<br><br>  <span class="hljs-comment">// 2.axios的拦截器</span><br>  <span class="hljs-comment">// 2.1.添加请求拦截器</span><br>  instance.<span class="hljs-property">interceptors</span>.<span class="hljs-property">request</span>.<span class="hljs-title function_">use</span>(<span class="hljs-function"><span class="hljs-params">config</span> =&gt;</span> &#123;<br>    <span class="hljs-comment">//在发送请求前做些什么</span><br>    <br>    <span class="hljs-comment">//请求成功时</span><br>    <span class="hljs-comment">//可以加一些处理代码，比如每次请求成功，都希望在界面显示一个图标</span><br><br>    <span class="hljs-comment">//注意处理之后，要把config返回出去</span><br>    <span class="hljs-keyword">return</span> config<br>  &#125;, <span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br>    <span class="hljs-comment">//请求失败时</span><br>    <span class="hljs-comment">// console.log(err);</span><br>  &#125;)<br><br>  <span class="hljs-comment">// 2.2.响应拦截</span><br>  instance.<span class="hljs-property">interceptors</span>.<span class="hljs-property">response</span>.<span class="hljs-title function_">use</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br><br>    <span class="hljs-comment">//要把拦截的信息返回出去，否则就会变成undefined</span><br>    <span class="hljs-keyword">return</span> res.<span class="hljs-property">data</span><br>  &#125;, <span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err);<br>  &#125;)<br><br>  <span class="hljs-comment">// 3.发送真正的网络请求</span><br>  <span class="hljs-comment">//instance(config)返回的是一个promise，用的时候可以直接用.then()</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">instance</span>(config)<span class="hljs-comment">//这个config是指传入的url、params等config选项</span><br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li>新建detail.js文件，传config给request</li></ul></li><li><p>在Detail.vue的create（）函数中调用，并将要用的数据通过data()进行保存，再通过props传给各个子组件</p><p>注意，因为接口数据较多且乱，可以通过constructor函数，新建类进行存储，detail页中新建了Goods、Shop、GoodsParams三个类</p></li></ol><h4 id="封装并使用Bscroll"><a href="#封装并使用Bscroll" class="headerlink" title="封装并使用Bscroll"></a>封装并使用Bscroll</h4><ol><li><p>封装Bscroll</p><ul><li><p>install ‘better-scroll’组件</p></li><li><p>主要属性</p><ul><li><p>probeType属性</p><p>是否实时监听滚动位置，“回到顶部”按钮时需要，$emit()发出事件并带position</p></li><li><p>pullLoad属性</p><p>监听滚动到底部</p><p>注意：需要用主动调用finishpullingup函数才能多次使用 $emit()发出事件</p></li><li><p>click属性</p></li></ul></li><li><p>封装的方法</p><ul><li>scrollTo</li><li>refresh</li><li>finishPullUp</li><li>refresh</li><li>getScrollY</li></ul></li></ul></li><li><p>使用Bscroll</p><ul><li><p>使用时必须设置height</p></li><li><p><strong>滑动不了的问题怎么处理？</strong></p><p>Bscroll的可滑动距离计算时，图片未加载完，等图片加载完，可滑动距离不会自动变，这时候就需要手动调用refresh函数，注意：为避免频繁调用，还需要用<strong>防抖函数</strong></p></li></ul></li></ol><h4 id="评价页日期显示"><a href="#评价页日期显示" class="headerlink" title="评价页日期显示"></a>评价页日期显示</h4><p>需要先把获得日期*1000，然后调用格式化函数（用了正则表达式），该函数存放在公共文件夹里-utils.js文件</p><h4 id="推荐页展示"><a href="#推荐页展示" class="headerlink" title="推荐页展示"></a>推荐页展示</h4><ol><li><p>数据获取</p><p>因为推荐页数据有专门的接口，所以配置request的url，获取recommend数据</p></li><li><p>使用GoodsList.vue组件，将数据props给它</p></li></ol><h4 id="回到顶部按钮"><a href="#回到顶部按钮" class="headerlink" title="回到顶部按钮"></a>回到顶部按钮</h4><ol><li><p>按钮封装</p><p>主要是css设置，包括定位（用fixed）和图片大小</p></li><li><p>使用</p><ul><li><p>监听click事件</p><ul><li>组件事件监听需要用<code>@click.native</code></li><li>返回顶部操作用BScroll的scrollTo(0,0,1500)</li></ul></li><li><p>设置v-show属性</p><p>position和设置的高度(滑多少显示)做比较，并将比较结果的值（true&#x2F;false）赋给v-show，这个position由Bscroll的$emit发出的事件负载的</p></li></ul></li></ol><h4 id="标题及内容对应"><a href="#标题及内容对应" class="headerlink" title="标题及内容对应"></a>标题及内容对应</h4><ul><li><p>点击标题到达具体界面</p><ul><li><p>将各个theme的offsetTop存入ThemeY这个数组，这样就能知道各个主题对应的距离。</p><ul><li>注意需要等图片加载完再调用函数，不然可能会出现undefined或者数值不对的情况</li></ul></li><li><p>接收DetailBar.vue组件发出的$emit事件及参数index,添加事件，在事件方法中直接scrollTo到ThemeY的位置，注意position是负值，offsetTop是正值，需要加一个负号-</p><p><code>  this.$refs.scroll.scrollTo(0, -this.ThemeY[index], 200);</code></p></li></ul></li><li><p>滑动页面，标题跟着变化</p><p>设置ListenerTheme方法,用来根据position.y来判断是哪个主题</p><ul><li><p>主要逻辑是position.y大于当前页offsetTop，小于下一页offsetTop</p></li><li><p>并将此时的i负值给currentIndex并props给DetailBar.vue，这样当前标题就会变红</p></li><li><p>注意：for判断时，会发现有数组越界问题，即当i&#x3D;3时，数组没有i+1项，就会返回undefined值，那么最后一页推荐页永远也取不到，处理办法就是在ThemeY新增一项足够大的值（Number.MAX_SAFE_INTEGER），for循环条件改为<code>i&lt;length-1</code></p></li><li><p>为避免频繁将i赋值给currentIndex问题，可以加一个if判断</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-title class_">Tlength</span> - <span class="hljs-number">1</span>; i++) &#123;<br>        <span class="hljs-keyword">let</span> <span class="hljs-title class_">Top</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">ThemeY</span>[i];<br>        <span class="hljs-keyword">if</span> (position &gt;= <span class="hljs-title class_">Top</span> &amp;&amp; position &lt;<span class="hljs-variable language_">this</span>.<span class="hljs-property">ThemeY</span>[i + <span class="hljs-number">1</span>]) &#123;<br>          <span class="hljs-comment">//加一个判断是为了避免频繁执行赋值</span><br>          <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">currentIndex</span> !== i) &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">currentIndex</span> = i;<br>          &#125;<br>          <span class="hljs-keyword">break</span>;<br>        &#125;<br>      &#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul><h4 id="添加到购物车"><a href="#添加到购物车" class="headerlink" title="添加到购物车"></a>添加到购物车</h4><ul><li>接收DetailBottomBar组件发出addToCart事件，将商品的各项信息赋值给obj对象，将obj添加到vuex中（或者直接通过mapGetters&#x2F;mapActions映射）</li></ul><h5 id="vuex"><a href="#vuex" class="headerlink" title="vuex"></a>vuex</h5><ul><li><p>安装vuex</p></li><li><p>新建index.js文件，createStore</p></li><li><p>getters、mutation、actions分装</p><p>mutation是唯一可以处理state的地方，里面的方法一般只完成一种操作，如果操作比较复杂或者是异步操作，需要放在actions里，由actions 调用commit方法唤醒mutation</p></li></ul><p>在当前页面，getter里有cartCount、CarList、TotalPrice方法，其中TotalPrice用到了filter和reduce函数；actions中有addCart函数，用来判断是数量加一还是新增商品；mutation里有addtocart和addcount操作</p><h4 id="toast组件"><a href="#toast组件" class="headerlink" title="toast组件"></a>toast组件</h4><p>为了方便全局使用，需要把toast做成插件</p><ul><li><p>新建Toast.vue组件，添加methods，主要是show方法，设置toast内容和时间</p></li><li><p>新建index.js文件</p><ul><li>实例化组件</li><li>.mount</li><li>定义全局插件</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//index.js</span><br><br><span class="hljs-comment">//Vue2 写法 </span><br><span class="hljs-keyword">const</span> obj = &#123;&#125;<br>obj.<span class="hljs-property">install</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">app</span>) &#123;<br>  <span class="hljs-comment">// 创建一个组件</span><br>  <span class="hljs-comment">//  第一步，创建组件构造器</span><br>   <span class="hljs-keyword">const</span> toastConstructor = <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">extend</span>(<span class="hljs-title class_">Toast</span>)<br>  <span class="hljs-comment">//  第二步，根据组件构造器，new一个组件</span><br>   <span class="hljs-keyword">const</span> toast = <span class="hljs-keyword">new</span> <span class="hljs-title function_">toastConstructor</span>()<br>  <span class="hljs-comment">//  第三步，将组件对象挂载到某个对象上</span><br>   toast.$mount(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;div&#x27;</span>))<br>  <span class="hljs-comment">//   此时toast.$el对应的就是div了</span><br>  <span class="hljs-comment">// 加到页面body中</span><br>  <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">appendChild</span>(toast.<span class="hljs-property">$el</span>)<br>  <span class="hljs-comment">// // 最后就能在原型上定义组件了，右边的Toast是指文件Toast.vue</span><br>  <span class="hljs-title class_">Vue</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">$toast</span> = <span class="hljs-title class_">Toast</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> obj<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//vue3写法</span><br><span class="hljs-comment">// 1.实例化并绑定组件</span><br><span class="hljs-keyword">const</span> obj = &#123;&#125;<br>obj.<span class="hljs-property">install</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">app</span>) &#123;<br>  <span class="hljs-keyword">const</span> toastConstructor =<span class="hljs-title function_">createApp</span>(<span class="hljs-title class_">Toast</span>);<br>  <span class="hljs-keyword">const</span> instance =toastConstructor.<span class="hljs-title function_">mount</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;div&#x27;</span>))<br>  <span class="hljs-comment">//2.将挂载的Node添加到body中</span><br>  <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(instance.<span class="hljs-property">$el</span>)<br>  <span class="hljs-comment">//3.定义全局（$toast为此插件的名称）</span><br>  app.<span class="hljs-property">config</span>.<span class="hljs-property">gobalProperties</span>.<span class="hljs-property">$toast</span> = instance;<br><br>&#125;   <br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> obj<br></code></pre></td></tr></table></figure></li><li><p>在main.js中添加toast</p><p>app.use(toast)</p></li><li><p>在Detail.js中直接使用$toast.show()进行展示</p></li></ul><h4 id="主要css布局"><a href="#主要css布局" class="headerlink" title="主要css布局"></a>主要css布局</h4><ul><li><p>尺码表的展示 table+v-for</p></li><li><p>底部bar图标公用一个大图，是通过background-position调整位置来显示不同的图标</p></li><li><p>布局较多采用flex布局</p></li><li><div class="code-wrapper"><pre><code class="css">justify-content:space-evenly /*均匀排列每个元素,每个元素之间的间隔相等*/align-item:center /*item水平居中*/<figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></div></td><td class="code"><pre><code class="hljs clean"><br>### 购物车<br><br>主要功能<br><br>- [购物车数量显示](#购物车商品数量显示)<br>- [vuex](#vuex)<br>- [商品列表展示](#商品列表展示)<br>- [全选按钮](#全选按钮)<br>- [合计](#合计)<br>- css<br><br>#### 购物车商品数量显示<br><br>直接读取mapGetters中的cartcount值<br><br>#### 商品列表展示<br><br>CartList.vue组件直接遍历store里面数据，并将每个item传给CartListItem<br><br>#### 全选按钮<br><br>- 什么情况下显示全选？<br><br>  有一个没有选中，则全选按钮就不是checked状态<br><br>  用find函数来判断是不是所有都选中<br><br>  ```js<br>  isSelectAll() &#123;<br>        <span class="hljs-keyword">if</span>(this.getcartList.length === <span class="hljs-number">0</span>) return false<br>        return !this.getcartList.find(item =&gt; !item.checked)<br>      &#125;<br>    &#125;,<br></code></pre></td></tr></table></figure></code></pre></li><li><p>点了全选会发生什么？</p><p>如果当前是全选状态，则所有都变成不选中；否则，都变成全选</p><p>用foreach来实现</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">if</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">isSelectAll</span>)&#123;<br>         <span class="hljs-variable language_">this</span>.<span class="hljs-property">getcartList</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item.<span class="hljs-property">checked</span>=<span class="hljs-literal">false</span>);<br>      &#125;<span class="hljs-keyword">else</span> &#123;<br>         <span class="hljs-variable language_">this</span>.<span class="hljs-property">getcartList</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item.<span class="hljs-property">checked</span>=<span class="hljs-literal">true</span>)<br>      &#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="合计"><a href="#合计" class="headerlink" title="合计"></a>合计</h4><p>计算属性一般放在getters里，在getters添加totalPrice，用filter和reduce函数实现</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">totalPrice</span>(<span class="hljs-params">state</span>)&#123;<br>    <span class="hljs-keyword">const</span> cartList = state.<span class="hljs-property">cartList</span><br>    <span class="hljs-keyword">return</span> cartList &amp;&amp; cartList.<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item.<span class="hljs-property">checked</span>).<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">price,item</span>) =&gt;</span>&#123;<br>      <span class="hljs-keyword">return</span> price+item.<span class="hljs-property">price</span>*item.<span class="hljs-property">count</span><br>    &#125;,<span class="hljs-number">0</span>).<span class="hljs-title function_">toFixed</span>(<span class="hljs-number">2</span>)<br>  &#125;<br></code></pre></td></tr></table></figure><h4 id="主要css"><a href="#主要css" class="headerlink" title="主要css"></a>主要css</h4><ol><li><p>制作按钮时，怎么让div和img重叠在一起？</p><p>div设置font-size为0，img转成块元素</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;check-button&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;~assets/img/cart/tick.svg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;&#123;check:isChecked&#125;&quot;</span>&gt;</span>   <br> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><br>/*css:*/<br><br>div &#123;<br>font-size:0;<br> &#125;<br>img &#123;<br>display:block;<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ol><h3 id="我的"><a href="#我的" class="headerlink" title="我的"></a>我的</h3><p>主要功能</p><ul><li><a href="#%E7%BB%84%E4%BB%B6%E5%B0%81%E8%A3%85">组件封装</a></li><li><a href="#%E5%9B%BE%E7%89%87%E5%B8%B8%E7%94%A8CSS">CSS</a></li></ul><h4 id="组件封装"><a href="#组件封装" class="headerlink" title="组件封装"></a>组件封装</h4><p>都是图片加文字的形式，所以统一封装一个组件NomalListView.vue,图片url和info都动态传递，</p><p>图片url需要用到require来获取路径</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;img :src=<span class="hljs-string">&quot;iconURL(item)&quot;</span> alt=<span class="hljs-string">&quot;&quot;</span>&gt;<br>...<br><span class="hljs-title function_">iconURL</span>(<span class="hljs-params">item</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;assets/img/profile/&quot;</span> + item.<span class="hljs-property">icon</span>)<br>      &#125;<br></code></pre></td></tr></table></figure><h3 id="图片常用CSS"><a href="#图片常用CSS" class="headerlink" title="图片常用CSS"></a>图片常用CSS</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-number">1</span>. <span class="hljs-attribute">vertical-align</span>:middle;<br><br><span class="hljs-number">2</span>.<span class="hljs-comment">/*定位也比较常用*/</span><br><span class="hljs-attribute">position</span>: absolute;<br><span class="hljs-attribute">top</span>: <span class="hljs-number">20px</span>;<br>  <span class="hljs-attribute">right</span>: <span class="hljs-number">0</span>;<br><span class="hljs-number">3</span>.子类选择器，选择最后一个属性<br>  <span class="hljs-selector-class">.item</span><span class="hljs-selector-pseudo">:last-of-type</span> &#123;<br>    <span class="hljs-attribute">border</span>: none;<br>  &#125;<br></code></pre></td></tr></table></figure><h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><h4 id="主要指令"><a href="#主要指令" class="headerlink" title="主要指令"></a>主要指令</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> git status 查看状态<br><span class="hljs-bullet">2.</span> git add .<br><span class="hljs-bullet">3.</span> git commit -m &quot;first commit&quot;<br><span class="hljs-bullet">4.</span> git push  origin main<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
