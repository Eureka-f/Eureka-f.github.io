<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>后台系统总结</title>
    <link href="/2022/04/23/%E5%90%8E%E5%8F%B0%E7%B3%BB%E7%BB%9F%E6%80%BB%E7%BB%93/"/>
    <url>/2022/04/23/%E5%90%8E%E5%8F%B0%E7%B3%BB%E7%BB%9F%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="后台管理系统项目总结"><a href="#后台管理系统项目总结" class="headerlink" title="后台管理系统项目总结"></a>后台管理系统项目总结</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>通用后台管理系统，分权限登录，权限不同用户展示的界面不同。使用的技术有vue、vuex、vue-router、Element-UI、Echarts，数据是使用Mockjs生成。</p><p><strong>主要页面：</strong></p><p>首页：用来展示用户基本信息及图表</p><p>商品页：查看商品详细数据（和图表一一对应），可以对商品数据进行增删改查</p><p>用户页：查看用户信息，可以进行增删改查</p><p>登录页：用户登录，根据登录账号进行权限跳转</p><h2 id="主要功能实现"><a href="#主要功能实现" class="headerlink" title="主要功能实现"></a>主要功能实现</h2><h3 id="页面布局"><a href="#页面布局" class="headerlink" title="页面布局"></a>页面布局</h3><p>页面通过Element-Ui实现，整体布局使用的Container 布局容器，使用的主要组件有</p><figure class="highlight vim"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><pre><code class="hljs vim"><span class="hljs-symbol">&lt;el-button&gt;</span>:按钮<br><span class="hljs-symbol">&lt;el-dropdown&gt;</span>：下拉菜单，触发方式默认是hover，可设置为click<br><span class="hljs-symbol">&lt;el-menu&gt;</span>:导航栏，submenu组件可以生成二级菜单<br><span class="hljs-symbol">&lt;el-tag&gt;</span>：标签，通过设置<span class="hljs-built_in">type</span>属性来设置颜色<br><span class="hljs-symbol">&lt;el-card&gt;</span>:卡片<br><span class="hljs-symbol">&lt;el-table&gt;</span>:表格<br><span class="hljs-symbol">&lt;el-form&gt;</span>表单，可以通过rules设置规则<br><span class="hljs-symbol">&lt;el-dialog&gt;</span>弹出一个对话框,常用属性visible、<span class="hljs-built_in">type</span><br><span class="hljs-symbol">&lt;el-pagination&gt;</span>分页，常用属性layout、page-size、total（总条目数）<br>message：消息提示<br><span class="hljs-keyword">confirm</span>：消息提示框，美化alert提示框<br></code></pre></td></tr></table></figure><h3 id="axios封装"><a href="#axios封装" class="headerlink" title="axios封装"></a>axios封装</h3><ol><li><p>配置axios并添加拦截器</p><ul><li><p>使用create方法创建axios实例，config参数有baseURL、timeout、header等</p></li><li><p>添加请求拦截器和响应拦截器</p></li></ul></li><li><p>封装请求</p><p>封装<code>getMenu</code>、<code>getData</code>、<code>getUserData</code>、<code>getMallData</code>等请求</p></li><li><p>使用</p><p>在组件直接使用getMenu().then()</p><p>或者在原型上拓展，这样就可以全局使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Vue</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">$http</span> = axios;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//在组件使用</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">$http</span>.<span class="hljs-title function_">post</span>()<br></code></pre></td></tr></table></figure></li></ol><h3 id="数据模拟"><a href="#数据模拟" class="headerlink" title="数据模拟"></a>数据模拟</h3><p>使用Mockjs进行数据模拟</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"> <span class="hljs-title class_">Mock</span>.<span class="hljs-title function_">mock</span>(&#123;<br>    <span class="hljs-string">&#x27;name|1&#x27;</span>: [<span class="hljs-string">&#x27;苹果&#x27;</span>, <span class="hljs-string">&#x27;三星&#x27;</span>, <span class="hljs-string">&#x27;oppo&#x27;</span>, <span class="hljs-string">&#x27;vivo&#x27;</span>, <span class="hljs-string">&#x27;魅族&#x27;</span>, <span class="hljs-string">&#x27;小米&#x27;</span>]<span class="hljs-comment">//从列表项随机选一个</span><br>    <span class="hljs-attr">id</span>: <span class="hljs-title class_">Mock</span>.<span class="hljs-property">Random</span>.<span class="hljs-title function_">guid</span>(),<span class="hljs-comment">//随机生成guid</span><br>    <span class="hljs-attr">count</span>: <span class="hljs-title class_">Mock</span>.<span class="hljs-property">Random</span>.<span class="hljs-title function_">float</span>(<span class="hljs-number">100</span>, <span class="hljs-number">8000</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>),<span class="hljs-comment">//产生随机数100到8000之间 保留小数 最小0位 最大0位</span><br>    <span class="hljs-attr">name</span>: <span class="hljs-title class_">Mock</span>.<span class="hljs-property">Random</span>.<span class="hljs-title function_">cname</span>(),<span class="hljs-comment">//随机中文名</span><br>    <span class="hljs-attr">addr</span>: <span class="hljs-title class_">Mock</span>.<span class="hljs-title function_">mock</span>(<span class="hljs-string">&#x27;@county(true)&#x27;</span>),<span class="hljs-comment">//随机地址，到区</span><br>    <span class="hljs-string">&#x27;age|18-60&#x27;</span>: <span class="hljs-number">1</span>,<span class="hljs-comment">//随机一个数</span><br>    <span class="hljs-attr">birth</span>: <span class="hljs-title class_">Mock</span>.<span class="hljs-property">Random</span>.<span class="hljs-title function_">date</span>(),<span class="hljs-comment">//随机日期</span><br>    <span class="hljs-attr">sex</span>: <span class="hljs-title class_">Mock</span>.<span class="hljs-property">Random</span>.<span class="hljs-title function_">integer</span>(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>)<span class="hljs-comment">//返回一个随机的整数</span><br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="图表展示"><a href="#图表展示" class="headerlink" title="图表展示"></a>图表展示</h3><p>使用Echarts展示柱状图、饼图和条形图</p><p>封装了一个echarts组件，按传入的数据展示是哪种类型，该组件props两个数据：isAxisChart、chartData（xData、series）</p><p>Echarts常用属性：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-title">legend</span>:图例，可以设置字体样式<br><span class="hljs-title">tooltip</span>：鼠标放上面显示的部分，trigger来设置触发类型，可设置为item（饼图常用）、axis（折线图、柱状图）<br><span class="hljs-title">xAxis</span>：x轴，可设置<span class="hljs-class"><span class="hljs-keyword">type</span>属性（坐标轴类型）、axisLabel（坐标轴刻度）</span><br><span class="hljs-title">yAxis</span>：y轴<br><span class="hljs-title">series</span>：系列，数据集映射到系列，常用属性<span class="hljs-class"><span class="hljs-keyword">type</span>（设置图表类型）、<span class="hljs-keyword">data</span>(该项对应的数据)、name（图例数据名字）</span><br></code></pre></td></tr></table></figure><h3 id="tag栏和面包屑的实现"><a href="#tag栏和面包屑的实现" class="headerlink" title="tag栏和面包屑的实现"></a>tag栏和面包屑的实现</h3><p><strong>面包屑</strong>使用<code>&lt;el-breadcrumb&gt;</code>实现，通过设置<code>separator-class=&quot;el-icon-arrow-right&quot;</code>可以将分隔符变成<code>&gt;</code></p><p>具体实现：</p><ol><li><p>在vuex的state中添加tabList属性，用于存储被点击过的组件的路由信息。</p></li><li><p>当点击左导航栏组件里的item时，会<code>commit</code> selectMenu方法，该方法会把当前页信息存入tabList</p></li><li><p>通过v-for遍历tag来获取各个<code>&lt;el-breadcrumb-item&gt;</code>所需要的信息，tag是通过<code>...mapState</code> 获取到vuex中state的tabList数据</p></li></ol><p><img src="/2022/04/23/%E5%90%8E%E5%8F%B0%E7%B3%BB%E7%BB%9F%E6%80%BB%E7%BB%93/Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20220422193136294.png" alt="image-20220422193136294"></p><p><strong>tags：</strong></p><ol><li><p>监听click事件，点击进行路由调整</p></li><li><p>监听close事件，关闭路由</p><p>通过mapMutation调用deleteMenu进行删除</p></li></ol><h3 id="登录-x2F-退出"><a href="#登录-x2F-退出" class="headerlink" title="登录&#x2F;退出"></a>登录&#x2F;退出</h3><ol><li>分权限登录</li></ol><p>​通过mockjs进行权限判断，admin和user登录显示的menu不同</p><ol start="2"><li><p>判断登录状态跳转界面</p><p>利用token验证用户是否处于登录状态</p><p>通过导航守卫进行跳转，如果为登录状态，界面直接跳转到home页，不再跳转login页；如果未登录状态，则直接跳转到login页</p></li></ol><h3 id="数据增删改查"><a href="#数据增删改查" class="headerlink" title="数据增删改查"></a>数据增删改查</h3><p>通过Mockjs来实现增伤改查</p><ul><li><p>在CommonTable组件发出emit事件：del、edit、chanPage</p></li><li><p>在父组件进行接收并响应事件</p><p>具体的删除、添加等操作由Mockjs处理并返回</p></li></ul><h2 id="封装的组件"><a href="#封装的组件" class="headerlink" title="封装的组件"></a>封装的组件</h2><p>CommonTable：展示全部数据时使用</p><p>Echarts：展示图表时使用</p><p>Form：新增数据的时候使用</p><p>Tags：导航栏</p>]]></content>
    
    
    
    <tags>
      
      <tag>Summarize</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
